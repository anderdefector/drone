#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Nov 17, 2019 03:26:51 PM CST  platform: Linux

import sys
import rospy
import cv2
import numpy as np
import time
import math
from cv_bridge import CvBridge, CvBridgeError
from bebop_msgs.msg import Ardrone3PilotingStateAltitudeChanged
from bebop_msgs.msg import CommonCommonStateBatteryStateChanged
from PIL import Image as Image2
from PIL import ImageTk
from std_msgs.msg import String
from std_msgs.msg import Empty
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry


br=CvBridge()


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def receive_pose(data):
    global x, y, z, num_pos, cont
    pose_datos=data.data.split(',')
    x=-float(pose_datos[11])
    y=float(pose_datos[3])
    z=float(pose_datos[7])
    w.Lbl_x.configure(text='x: '+str(x))
    w.Lbl_y.configure(text='y: '+str(y))
    w.Lbl_z.configure(text='z: '+str(z))
    if inicio_estado:
        #vx=control_x.control_P(ref,q,kp,sat,dz)
        vx=control_x.control_P(ref[num_pos,0],x,10.0,0.3,0.01)
        vy=control_y.control_P(ref[num_pos,1],y,10.0,0.3,0.01)
        vz=control_z.control_P(ref[num_pos,2],z,10.0,0.3,0.01)
        va=control_yaw.control_P(0.0,0.0,3,0.1,0.01)
        print "ref= [", ref[num_pos,0], ref[num_pos,1], ref[num_pos,2], "]"
        print "act=[",  x, y, z, "]"
        enviar_velocidad(vx,vy,vz,va)
        enviar_velocidad(vx,vy,vz,va)
        error = math.sqrt(math.pow(vx,2)+pow(vy,2)+pow(vz,2))
        print "error=" , error
        print "dato=", num_pos
        if error<0.1:
            num_pos=num_pos+1
#        cont= cont+1
#        if cont>10:
#            cont=0
#            num_pos=num_pos+1
        if num_pos>len(ref)-1:
#            print "reicionoi"
#            cont=0
            num_pos=0
            w.Bt_inicio.invoke()
            time.sleep(1)
#        print ref[num_pos,0]


def set_Tk_var():
    global x, y, z, inicio_estado, num_pos
    global takeoff_pub, land_pub, vel_pub
    global control_x, control_y, control_z, control_yaw
    global ref, cont
    x=0
    y=0
    z=0
    inicio_estado= 0
    num_pos=0
    ref=[]
    cont=0
    takeoff_pub = rospy.Publisher('/bebop/takeoff', Empty, queue_size=10)
    land_pub = rospy.Publisher('/bebop/land', Empty, queue_size=10)
    vel_pub = rospy.Publisher('/bebop/cmd_vel', Twist, queue_size=10)  
    control_x=controlador()
    control_y=controlador()
    control_z=controlador()
    control_yaw=controlador()    

def leer_puntos_referencia():
    global ref
    caja= w.coordenadas.get("1.0", tk.END)
    caja=caja.split('\n')
    ref=np.zeros((len(caja)-1,3))
    for x in range(len(caja)-1):
        aux=caja[x].split(',')
        ref[x]=[float(str(aux[0])), float(str(aux[1])), float(str(aux[2]))]

def fcn_inicio():
    global inicio_estado
    inicio_estado=(inicio_estado+1)%2
    if inicio_estado:
        w.Bt_inicio.configure(text='Detener')
        Despegar()
        leer_puntos_referencia()
        esperar_despegue()
    else:
        w.Bt_inicio.configure(text='Iniciar')        
        Aterrizar()
def esperar_despegue():
    pass
def receive_img(data):
    frame = br.imgmsg_to_cv2(data, "bgr8")
    visualiza_img(frame, w.imagen)

def receive_altitud(data):
    global altitud
    altitud = data.altitude
    #print "alt=" + str(altitud)

def receive_beteria(data):
    global bateria
    bateria = data
    #print bateria

def receive_odom(data):
    global odom_var
    odom_var=data
    #print odom_var

def visualiza_img(img, label_img):
    if len(img.shape)==3:
        img=cv2.cvtColor(img.copy(), cv2.COLOR_BGR2RGB)
        Recorte = cv2.resize(img,(320,240))
        a = Image2.fromarray(Recorte)
        b = ImageTk.PhotoImage(image=a)
        label_img.configure(image=b)
        label_img._image_cache = b

def Despegar():
    takeoff_pub.publish(Empty())
    takeoff_pub.publish(Empty())

def Aterrizar():
    enviar_velocidad(0.0,0.0,0.0, 0.0)
    enviar_velocidad(0.0,0.0,0.0, 0.0)
    land_pub.publish(Empty())
    land_pub.publish(Empty())

def enviar_velocidad(vx,vy,vz,vaz):
    vel_msg = Twist()
    vel_msg.linear.x = float(vx)
    vel_msg.linear.y = float(vy)
    vel_msg.linear.z = float(vz)
    vel_msg.angular.x = float(0.0)
    vel_msg.angular.y = float(0.0)
    vel_msg.angular.z = float(vaz)
    vel_pub.publish(vel_msg)

class controlador:
    def __init__(self):
        self.er_ant=0.01
        self.er=0.1
    def control_P(self,ref,q,kp,sat,dz):
        er=ref-q
        tao=kp*er
        if abs(er)<=dz:
            tao=0.0
        if tao>sat:
            tao=sat
        if tao<-sat:
            tao=-sat
        return tao

    def control_PD(self,ref,q,kp,sat,dz):
        kd=kp/10
        er=ref-q
        der=er-self.er_ant
        self.er_ant=er
        tao=kp*er+kd*der
        if abs(er)<=dz:
            tao=0.0
        if tao>sat:
            tao=sat
        if tao<-sat:
            tao=-sat
        return tao


if __name__ == '__main__':
    import bebop_control_orbaslam
    bebop_control_orbaslam.vp_start_gui()




